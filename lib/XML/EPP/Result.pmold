
package XML::EPP::Result;

use Moose;
use MooseX::Method::Signatures;
use Moose::Util::TypeConstraints;
use PRANG::Graph;

use XML::EPP::Error;

our $SCHEMA_PKG = "XML::EPP";
our $PKG = __PACKAGE__;

# grep '^ *[0-9][0-9][0-9][0-9]  *' rfc5730.txt
our %result_codes = map { m/^\s*(\d{4})\s+"(.*)"$/ } split /\n/, <<CODES;
      1000    "Command completed successfully"
      1001    "Command completed successfully; action pending"
      1300    "Command completed successfully; no messages"
      1301    "Command completed successfully; ack to dequeue"
      1500    "Command completed successfully; ending session"
      2000    "Unknown command"
      2001    "Command syntax error"
      2002    "Command use error"
      2003    "Required parameter missing"
      2004    "Parameter value range error"
      2005    "Parameter value syntax error"
      2100    "Unimplemented protocol version"
      2101    "Unimplemented command"
      2102    "Unimplemented option"
      2103    "Unimplemented extension"
      2104    "Billing failure"
      2105    "Object is not eligible for renewal"
      2106    "Object is not eligible for transfer"
      2200    "Authentication error"
      2201    "Authorization error"
      2202    "Invalid authorization information"
      2300    "Object pending transfer"
      2301    "Object not pending transfer"
      2302    "Object exists"
      2303    "Object does not exist"
      2304    "Object status prohibits operation"
      2305    "Object association prohibits operation"
      2306    "Parameter value policy error"
      2307    "Unimplemented object service"
      2308    "Data management policy violation"
      2400    "Command failed"
      2500    "Command failed; server closing connection"
      2501    "Authentication error; server closing connection"
      2502    "Session limit exceeded; server closing connection"
CODES

#
# Successful command completion responses:
#
use constant OK					=> 1000;
use constant OK_PENDING				=> 1001;
use constant OK_NO_MESSAGES			=> 1300;
use constant OK_MESSAGES			=> 1301;
use constant OK_BYE				=> 1500;

#
# Command error responses:
#

# Protocol Syntax:
use constant UNKNOWN_COMMAND			=> 2000;
use constant SYNTAX_ERROR			=> 2001;
use constant USE_ERROR				=> 2002;
use constant MISSING_PARAM			=> 2003;
use constant PARAM_RANGE_ERROR			=> 2004;
use constant PARAM_SYNTAX_ERROR			=> 2005;

# Implementation-specific Rules:
use constant UNIMPLEMENTED_VERSION		=> 2100;
use constant UNIMPLEMENTED_COMMAND		=> 2101;
use constant UNIMPLEMENTED_OPTION		=> 2102;
use constant UNIMPLEMENTED_EXTENSION		=> 2103;
use constant BILLING_FAILURE			=> 2104;
use constant NOT_RENEWABLE			=> 2105;
use constant NOT_TRANSFERRABLE			=> 2106;

# Security:
use constant AUTHENTICATION_ERROR		=> 2200;
use constant AUTHORISATION_ERROR		=> 2201;
use constant AUTHORIZATION_ERROR		=> 2201;
use constant INVALID_AUTH_INFO			=> 2202;

# Data Management:
use constant OBJECT_PENDING_TRANSFER		=> 2300;
use constant OBJECT_NOT_PENDING_TRANSFER	=> 2301;
use constant OBJECT_EXISTS			=> 2302;
use constant OBJECT_DOES_NOT_EXIST		=> 2303;
use constant STATUS_PROHIBITS_OP		=> 2304;
use constant ASSOC_PROHIBITS_OP			=> 2305;
use constant PARAM_POLICY_ERROR			=> 2306;
use constant UNIMPLEMENTED_OBJECT_SERVICE	=> 2307;
use constant DATA_MGMT_POLICY_VIOLATION		=> 2308;

# Server System:
use constant COMMAND_FAILED			=> 2400;

# Connection Management:
use constant COMMAND_FAILED_BYE			=> 2500;
use constant AUTH_FAILED_BYE			=> 2501;
use constant SESSION_LIMIT_EXCEEDED_BYE		=> 2502;

has_element 'msg' =>
	is => "rw",
	isa => "${SCHEMA_PKG}::msgType",
	coerce => 1,
	;

our @RESULT_CONSTANTS;
BEGIN {
	no strict 'refs';
	@RESULT_CONSTANTS = grep /^[A-Z_]+$/, keys %{__PACKAGE__."::"};
}
use Sub::Exporter -setup => {
	exports => \@RESULT_CONSTANTS,
       };

sub BUILD {
	my $self = shift;
	my $msg = $self->msg;
	if ( !$msg and ($msg = $result_codes{$self->code}) ) {
		$self->msg($msg);
	}
}

subtype "${PKG}::choice0"
	=> as join("|", map { "${SCHEMA_PKG}::$_" }
			   qw(errValueType extErrValueType)),
	;

has_element 'errors' =>
	is => "rw",
	isa => "ArrayRef[${PKG}::choice0]",
	predicate => "has_errs",
	xmlns => XML::EPP::Node::xmlns(),
	traits => [qw/Array/],
	xml_nodeName => {
		"value" => "PRANG::XMLSchema::Whatever",
		"extValue" => "${SCHEMA_PKG}::Error",
	},
	handles => {
		add_error => 'push',
	},
	xml_min => 0,
	;

subtype "${SCHEMA_PKG}::resultCodeType"
	=> as "Int"
	=> where {
		exists $result_codes{$_};
	};

coerce "${SCHEMA_PKG}::resultCodeType"
	=> from "Str"

has_attr 'code' =>
	is => "rw",
	isa => "${SCHEMA_PKG}::resultCodeType",
	;

with 'XML::EPP::Node';

subtype "${SCHEMA_PKG}::resultType"
	=> as __PACKAGE__;

sub is_command { 0 }

1;
